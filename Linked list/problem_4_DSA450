//Save this file as name Linkedlist.java

package LinkedList;
import java.util.*;

class Linkedlist {

    Node head;
    private int size;

    Linkedlist() {
        size = 0;
    }

    public class Node {
        int data;
        Node next;

        Node(int data) {
            this.data = data;
            this.next = null;
            size++;
        }
    }

    public void addFirst(int data) {
        Node newNode = new Node(data);
        newNode.next = head;
        head = newNode;
    }

    public void addLast(int data) {
        Node newNode = new Node(data);

        if(head == null) {
            head = newNode;
            return;
        }

        Node lastNode = head;
        while(lastNode.next != null) {
            lastNode = lastNode.next;
        }

        lastNode.next = newNode;
    }

    public void printList() {
        Node currNode = head;

        while(currNode != null) {
            System.out.print(currNode.data+" -> ");
            currNode = currNode.next;
        }

        System.out.println("null");
    }

    public void removeFirst() {
        if(head == null) {
            System.out.println("Empty List, nothing to delete");
            return;
        }

        head = this.head.next;
        size--;
    }

    public void removeLast() {
        if(head == null) {
            System.out.println("Empty List, nothing to delete");
            return;
        }

        size--;
        if(head.next == null) {
            head = null;
            return;
        }

        Node currNode = head;
        Node lastNode = head.next;
        while(lastNode.next != null) {
            currNode = currNode.next;
            lastNode = lastNode.next;
        }

        currNode.next = null;
    }

    public int getSize() {
        return size;
    }

    public void addInMiddle(int index, int data) {
        if(index > size || index < 0) {
            System.out.println("Invalid Index value");
            return;
        }
        size++;

        Node newNode = new Node(data);
        if(head == null || index == 0) {
            newNode.next = head;
            head = newNode;
            return;
        }
        Node currNode = head;
        for(int i=1; i<size; i++) {
            if(i == index) {
                Node nextNode = currNode.next;
                currNode.next = newNode;
                newNode.next = nextNode;
                break;
            }
            currNode = currNode.next;
        }
    }

    /*public void reverseLinkedList(){

        if(head == null || head.next == null){
            return;
        }

        Node curr = head, pre = null, next = null;
        while(curr != null){
            next = curr.next;
            curr.next = pre;

            //update previous and current value
            pre = curr;
            curr = next;
        }
        head.next = null;
        head = pre;
    }*/

    /*public Node reverseListRecursive(Node head){
        if(head == null || head.next == null){
            System.out.println(head + " lol");
            return head;
        }
        Node newHead = reverseListRecursive(head.next);
        System.out.println(newHead);

        head.next.next = head;
        head.next = null;
        return newHead;
    }*/

    /*public Node reverse(Node node, int k)
    {
        Node curr=node;
        Node next=null;
        Node prev=null;
        int count=0;

        while(count<k && curr!=null)
        {
            next=curr.next;
            curr.next=prev;
            prev=curr;
            curr=next;
            count++;

        }
        if (next != null)
            node.next = reverse(next, k);
        return prev;


    }*/

    public boolean detectLoop(Node head) {
        //My solution for detecting loop in linkedList
        //time complexity:O(n) & auxiliary space:O(n)
       /* ArrayList<Node> s = new ArrayList<Node>();
        while (head != null) {

            if (s.contains(head))
                return true;

            s.add(head);

            head = head.next;
        }

        return false;*/

        //GFG solution for detecting loop in linkedList
        //time complexity:O(n) & auxiliary space:O(1)

        Node fast = head.next;
        Node slow = head;

        while( fast != slow)
        {
            //if the node pointed by first pointer(fast) or the node
            //next to it is null, we return false.
            if( fast==null || fast.next==null)
                return false;

            fast=fast.next.next;
            slow=slow.next;
        }
        //if we reach here it means both the pointers fast and slow point to
        //same node which shows the presence of loop so we return true.
        return true;

        //Working and legit and simple solution for detecting loop in linkedList
        // time complexity:O(n) & auxiliary space:O(1)
        /*Node temp = head;
        while(temp.next!=null)
        {
            temp.data = -3;
            temp = temp.next;

            if(temp.data == -2)
                return true;
        }
        return false;*/
    }

    public void removeLoop(Node head){
        Node temp = head,prev = null;
        while(temp.next != null){

            if(temp.data == -1){
                prev.next = null;
                break;
            }
            else{
                temp.data = -1;
                prev = temp;
                temp = temp.next;
            }
        }
    }



    public static void main(String args[]) {
        Linkedlist list = new Linkedlist();
        list.addLast(1);
        list.addLast(2);
        list.addLast(3);
        list.addLast(4);
        list.addLast(7);

        //Creating looping in List for testing
        list.head.next.next.next.next.next = list.head;

        /*list.reverseLinkedList();

        list.printList();

        list.head = list.reverseListRecursive(list.head);
        list.head = list.reverse(list.head,3);*/

        //boolean isLoopIsTheir1 = list.detectLoop(list.head);
        //System.out.println(isLoopIsTheir1);

        //list.printList();
        list.removeLoop(list.head);

        boolean isLoopIsTheir2 = list.detectLoop(list.head);
        System.out.println(isLoopIsTheir2);


    }
}

