class Linkedlist {

    Node head;
    private int size;

    Linkedlist() {
        size = 0;
    }

    public class Node {
        int data;
        Node next;

        Node(int data) {
            this.data = data;
            this.next = null;
            size++;
        }
    }

    public void addLast(int data) {
        Node newNode = new Node(data);

        if(head == null) {
            head = newNode;
            return;
        }

        Node lastNode = head;
        while(lastNode.next != null) {
            lastNode = lastNode.next;
        }

        lastNode.next = newNode;
    }

    public void printList() {
        Node currNode = head;

        while(currNode != null) {
            System.out.print(currNode.data+" -> ");
            currNode = currNode.next;
        }

        System.out.println("null");
    }
    
    public Node detectLoopHead(Node head) {
        //Congrates you delete whole datat in linkedList.
        //Time complexity: O(n) and space complexity: O(1)
        /*Node temp = head,prev = null;
        while(temp.next != null){

            if(temp.data == -1){
                prev.next = null;
                break;
            }
            else{
                temp.data = -1;
                prev = temp;
                temp = temp.next;
            }
        }*/
        
        
        /*//Another way to get the loop head
        //Time complexity: O(n) and space complexity: O(n)
        int n=0;
        ArrayList<Node> prev = new ArrayList<>(n);
        Node temp = head,lastNode = null;
        while(temp != null){
            if(prev.contains(temp)){
                break;
            }
            else{
                prev.add(temp);
                temp = temp.next;
            }

        }
        return temp;
        */
        
        //Best way to get the loop Head
        //Time complexity: O(n) and space complexity: O(1)
        
        //CASE 1: if head is null or head.next is null
        if (head == null || head.next == null) {
            return null;
        }

        //CASE 2: if there is list then check it has loop or not

        Node slow = head, fast = head;

        slow = slow.next;
        fast = fast.next.next;

        while (fast != null && fast.next != null) {
            if (slow == fast) {
                break;
            }
            slow = slow.next;
            fast = fast.next.next;
        }

        // If there is no loop then return null
        if (slow != fast) {
            return null;
        }
        
        // If there is loop then to get the loop head
        else {
            slow = head;
            while (slow != fast) {
                slow = slow.next;
                fast = fast.next;
            }

            return slow;

        }

    }
    
     public static void main(String args[]) {
        Linkedlist list = new Linkedlist();
        list.addLast(1);
        list.addLast(2);
        list.addLast(3);
        list.addLast(4);
        list.addLast(7);
        list.addLast(9);
        list.addLast(5);
        list.addLast(7);

        //Creating looping in List for testing
        list.head.next.next.next.next.next.next.next = list.head.next.next;

        Node loopHead=list.detectLoopHead(list.head);
        System.out.println("This is the head of loop : " + loopHead.data);

 
    }
}
