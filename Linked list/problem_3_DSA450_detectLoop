//Save this file as name Linkedlist.java
package LinkedList;
import java.util.*;

class Linkedlist {

    Node head;
    private int size;

    Linkedlist() {
        size = 0;
    }

    public class Node {
        int data;
        Node next;

        Node(int data) {
            this.data = data;
            this.next = null;
            size++;
        }
    }

    public void addLast(int data) {
        Node newNode = new Node(data);

        if(head == null) {
            head = newNode;
            return;
        }

        Node lastNode = head;
        while(lastNode.next != null) {
            lastNode = lastNode.next;
        }

        lastNode.next = newNode;
    }

    public void printList() {
        Node currNode = head;

        while(currNode != null) {
            System.out.print(currNode.data+" -> ");
            currNode = currNode.next;
        }

        System.out.println("null");
    }

    public boolean detectLoop(Node head) {
        //My solution for detecting loop in linkedList
        //time complexity:O(n) & auxiliary space:O(n)
       /* ArrayList<Node> s = new ArrayList<Node>();
        while (head != null) {

            if (s.contains(head))
                return true;

            s.add(head);

            head = head.next;
        }

        return false;*/

        //GFG solution for detecting loop in linkedList
        //Floyds cycle finding algorithm
        //time complexity:O(n) & auxiliary space:O(1)

        Node fast = head.next;
        Node slow = head;

        while( fast != slow)
        {
            //if the node pointed by first pointer(fast) or the node
            //next to it is null, we return false.
            if( fast==null || fast.next==null)
                return false;

            fast=fast.next.next;
            slow=slow.next;
        }
        //if we reach here it means both the pointers fast and slow point to
        //same node which shows the presence of loop so we return true.
        return true;

        //Working solution for detecting loop in linkedList
        // time complexity:O(n) & auxiliary space:O(1)
        /*Node temp = head;
        while(temp.next!=null)
        {
            temp.data = -1;
            temp = temp.next;

            if(temp.data == -1)
                return true;
        }
        return false;*/
    }



    public static void main(String args[]) {
        Linkedlist list = new Linkedlist();
        list.addLast(1);
        list.addLast(2);
        list.addLast(3);
        list.addLast(4);
        list.addLast(7);
        
        //Creating looping in List for testing
        list.head.next.next.next.next.next = list.head;

        boolean isLoopIsTheir = list.detectLoop(list.head);
        System.out.println(isLoopIsTheir);
    }
}

