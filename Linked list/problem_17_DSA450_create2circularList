//Save the file as Linkedlist.java

class Linkedlist {

    Node head;
    private int size;

    Linkedlist() {
        size = 0;
    }

    public class Node {
        int data;
        Node next;

        Node(int data) {
            this.data = data;
            this.next = null;
            size++;
        }
    }
    
    public void addLast(int data) {
        Node newNode = new Node(data);

        if(head == null) {
            head = newNode;
            return;
        }

        Node lastNode = head;
        while(lastNode.next != null) {
            lastNode = lastNode.next;
        }

        lastNode.next = newNode;
    }

    public void printList1() {
        Node currNode = head1;

        while(currNode != null) {
            System.out.print(currNode.data+" -> ");
            if(currNode.next == head1) {
                break;
            }
            currNode = currNode.next;
        }

        System.out.println("null");
    }
    
    public void printList2() {
        Node currNode = head2;

        while(currNode != null) {
            System.out.print(currNode.data+" -> ");
            if(currNode.next == head2) {
                break;
            }
            currNode = currNode.next;
        }

        System.out.println("null");
    }
    
    public static double Size(Node head){
        Node temp = head;
        double size = 0;
        while(temp != null){
            if(temp.next == head){
                size++;
                break;
            }
            size++;
            temp = temp.next;
        }
        return size;
    }
    
    // Function  to split a circular LinkedList
    public static void splitList(Linkedlist list)
    {

        double size,half,k=1.0f;
        Node newHead = null,temp = list.head;
        size = Size(list.head);
        half = Math.ceil(size / 2);

        System.out.println(size);
        System.out.println(half);

        while(temp != null){
            if(k == half){
                newHead = temp.next;
                temp.next = list.head;
                break;
            }


            k++;
            temp = temp.next;
        }

        temp = newHead;

        while(temp != null){
            if(temp.next == list.head){
                temp.next = newHead;
                break;
            }

            temp = temp.next;
        }

        list.head1 = list.head;
        list.head2 = newHead;
    }
    
    public static void main(String[] args) {
        Linkedlist list = new Linkedlist();
        
        list.addLast(3);
        list.addLast(6);
        list.addLast(9);
        list.addLast(8);
        list.addLast(10);

        list.head.next.next.next.next.next = list.head;
        splitList(list);
        list.printList1();
        list.printList2();

    }
}
